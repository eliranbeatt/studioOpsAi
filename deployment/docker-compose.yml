version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14
    container_name: studioops-postgres-dev
    environment:
      POSTGRES_DB: studioops
      POSTGRES_USER: studioops
      POSTGRES_PASSWORD: studioops123
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U studioops -d studioops"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - studioops-network

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: studioops-minio-dev
    environment:
      MINIO_ROOT_USER: studioops
      MINIO_ROOT_PASSWORD: studioops123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - studioops-network

  # API Server
  api:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.api
    container_name: studioops-api-dev
    environment:
      DATABASE_URL: postgresql://studioops:studioops123@postgres:5432/studioops
      API_HOST: 0.0.0.0
      API_PORT: 8003
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: studioops
      MINIO_SECRET_KEY: studioops123
      MINIO_SECURE: "false"
      DEVELOPMENT_MODE: "true"
      DEBUG_ENABLED: "true"
      LOG_LEVEL: DEBUG
    ports:
      - "8003:8003"
    volumes:
      - ../apps/api:/app
      - ../logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - studioops-network
    restart: unless-stopped

  # Frontend (Next.js)
  web:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.web
    container_name: studioops-web-dev
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8003
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_SECRET: dev_nextauth_secret_not_for_production
    ports:
      - "3000:3000"
    volumes:
      - ../apps/web:/app
    depends_on:
      api:
        condition: service_healthy
    networks:
      - studioops-network
    restart: unless-stopped

  # Redis (Optional - for caching)
  redis:
    image: redis:7-alpine
    container_name: studioops-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - studioops-network

volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local
  redis_data:
    driver: local

networks:
  studioops-network:
    driver: bridge